{"version":3,"sources":["components/Home.js","components/BikeData.js","components/OpenMap.js","components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["Home","BikeData","useState","bikes","setBikes","useEffect","axios","get","then","res","data","network","stations","Table","map","key","id","name","empty_slots","free_bikes","OpenMap","activeMarker","setActiveMarker","desc","setDesc","tempp","setTemp","imgUrl","setImgUrl","console","log","main","temp","weather","description","icon","Map","center","zoom","TileLayer","url","attribution","bike","Marker","position","latitude","longitude","onClick","Popup","onClose","className","src","alt","Weather","city","setCity","weatherUrl","humidity","setHumidity","placeholder","onChange","target","value","App","Navbar","style","expand","fixed","variant","bg","Nav","Link","href","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.8c46187d.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Home = () => {\r\n    return(\r\n        <div>\r\n            <h2>Avoimet rajapinnat</h2>\r\n            <h3>homepage</h3>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Home;","import React, {useState, useEffect} from 'react';\r\nimport axios from 'axios';\r\nimport { Table } from 'react-bootstrap';\r\n\r\nfunction BikeData() {\r\nconst [bikes, setBikes] = useState([]);\r\n\r\nuseEffect(() => {\r\n  axios.get('https://api.citybik.es/v2/networks/citybikes-helsinki')\r\n    .then((res) => res.data)\r\n    .then((res) => setBikes(res.network.stations))\r\n}, []) \r\n\r\n  return (\r\n    <div>\r\n      <Table>\r\n        <tbody>\r\n          <tr><th>osoite:</th><th>vapaita paikkoja:</th><th>vapaita pyöriä:</th></tr>\r\n          {bikes.map(res =>\r\n            (<tr key={res.id}>\r\n              <th>{res.name}</th>\r\n              <th>{res.empty_slots}</th>\r\n              <th>{res.free_bikes}</th>\r\n              </tr>))}\r\n        </tbody>\r\n      </Table>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default BikeData;\r\n","import React, {useState, useEffect} from 'react';\r\nimport axios from 'axios';\r\nimport { Map, Marker, Popup, TileLayer } from \"react-leaflet\";\r\n\r\nconst OpenMap = () => {\r\nconst [activeMarker, setActiveMarker] = useState(null);\r\nconst [bikes, setBikes] = useState([]);\r\nconst weatherUrl = `https://api.openweathermap.org/data/2.5/weather?q=helsinki&units=metric&appid=a9c44d9574c3e8c65912fed0ec099b45`\r\nconst [desc, setDesc] = useState('');\r\nconst [tempp, setTemp] = useState('');\r\nconst [imgUrl, setImgUrl] =useState('http://openweathermap.org/img/wn/10d@2x.png');\r\n\r\nuseEffect(() => {\r\naxios.get('https://api.citybik.es/v2/networks/citybikes-helsinki')\r\n    .then((res) => res.data)\r\n    .then((res) => setBikes(res.network.stations))\r\n}, [])\r\n \r\nuseEffect(() =>{\r\n    axios.get(weatherUrl)\r\n            .then((res) => res.data)\r\n            .then((res) =>{\r\n                console.log(res.main.temp);\r\n                setDesc(res.weather[0].description);\r\n                setTemp(res.main.temp)\r\n                setImgUrl(`http://openweathermap.org/img/wn/${res.weather[0].icon}@2x.png`)\r\n            \r\n            })\r\n        }, [])\r\n\r\n    //Map center koordinaatti = kamppi\r\n    return(\r\n        <div>\r\n            <Map center={[60.1675, 24.9311]} zoom={12}>\r\n            <TileLayer\r\n                url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n            />\r\n\r\n            {bikes.map(bike => (\r\n                <Marker key={bike.id} position={[bike.latitude, bike.longitude]}\r\n                onClick={()=>setActiveMarker(bike)}\r\n                />\r\n            ))}\r\n            {activeMarker && (<Popup\r\n            position={[activeMarker.latitude, activeMarker.longitude]}\r\n            onClose={()=>setActiveMarker(null)}\r\n            >\r\n                <div className=\"markerPopup\">\r\n                    <h2>{activeMarker.name}</h2>\r\n            <p>Free bikes: {activeMarker.free_bikes}</p>\r\n            <p>Free slots: {activeMarker.empty_slots}</p>\r\n            <p>Lämpöasteita: {tempp}°C</p>\r\n            <p>{desc}</p>\r\n            <img src={imgUrl} key={imgUrl} alt=\"sää kuva\"></img>\r\n                </div>\r\n            </Popup>\r\n            )}\r\n            </Map>\r\n            \r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default OpenMap;","import React, {useState, useEffect} from 'react';\r\nimport axios from 'axios';\r\n\r\nfunction Weather() {\r\n    const [city, setCity] = useState('');   //default helsinki\r\n    const weatherUrl = `https://api.openweathermap.org/data/2.5/weather?q=${city}&units=metric&appid=a9c44d9574c3e8c65912fed0ec099b45`\r\n    const [desc, setDesc] = useState('');\r\n    const [tempp, setTemp] = useState('');\r\n    const [humidity, setHumidity] = useState('');\r\n    const [imgUrl, setImgUrl] =useState('http://openweathermap.org/img/wn/10d@2x.png');\r\n\r\n    const getData = () =>{\r\n        axios.get(weatherUrl)\r\n        .then((res) => res.data)\r\n        .then((res) =>{\r\n            console.log(res.main.temp);\r\n            setDesc(res.weather[0].description);\r\n            setTemp(res.main.temp)\r\n            setHumidity(res.main.humidity)\r\n            setImgUrl(`http://openweathermap.org/img/wn/${res.weather[0].icon}@2x.png`)\r\n        \r\n        })\r\n        \r\n    }\r\n\r\n    const handleChange = ({target}) =>{\r\n        setCity(target.value);\r\n\r\n    }\r\n    return(\r\n        <div className=\"weatherInfo\">\r\n            <input placeholder=\"etsi kaupungin sää..\" onChange={handleChange} value={city} ></input>\r\n            <button onClick={getData}>Search</button>\r\n            <h2>forecast for: {city}</h2>\r\n            <h3>tempature: {tempp}°C</h3>\r\n            <h3>description: {desc}</h3>\r\n            <h3>huimidity: {humidity}</h3>\r\n            <img src={imgUrl} key={imgUrl} alt=\"sää kuva\"></img>\r\n        \r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default Weather","import React from 'react';\nimport './App.css';\nimport Home from './components/Home.js'\nimport BikeData from './components/BikeData.js'\nimport Map from './components/OpenMap.js'\nimport Weather from './components/Weather.js'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Navbar, Nav } from 'react-bootstrap';\nimport { HashRouter as Router, Route, Switch } from 'react-router-dom'\n\nfunction App() {\n\n\n  return (\n    <div className=\"App\">\n      <Router>\n        <Navbar style={{position: \"sticky\"}} expand=\"lg\" fixed=\"top\" variant=\"dark\" bg=\"dark\">\n\n          <Nav.Link href=\"#/\">Home</Nav.Link>\n          <Nav.Link href=\"#/bikes\">Bikes</Nav.Link>\n          <Nav.Link href=\"#/map\">Map</Nav.Link>\n          <Nav.Link href=\"#/weather\">Weather</Nav.Link>\n        \n        </Navbar>\n          <div>\n            <Switch>\n              <Route exact path=\"/\" component={Home} />\n              <Route path=\"/bikes\" component={BikeData} />\n              <Route path=\"/map\" component={Map} />\n              <Route path=\"/weather\" component={Weather} />\n            </Switch>\n         </div>  \n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}